// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Detects errors in code using AI.
 *
 * - detectErrors - A function that detects errors in code.
 * - DetectErrorsInput - The input type for the detectErrors function.
 * - DetectErrorsOutput - The return type for the detectErrors function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const DetectErrorsInputSchema = z.object({
  code: z.string().describe('The code snippet to analyze.'),
  language: z.string().describe('The programming language of the code.'),
});
export type DetectErrorsInput = z.infer<typeof DetectErrorsInputSchema>;

const DetectErrorsOutputSchema = z.object({
  errors: z.array(
    z.object({
      line: z.number().describe('The line number where the error occurs.'),
      errorType: z.string().describe('The type of error.'),
      description: z.string().describe('A description of the error.'),
      severity: z.string().describe('The severity level of the error.'),
    })
  ).describe('A list of errors found in the code.'),
});
export type DetectErrorsOutput = z.infer<typeof DetectErrorsOutputSchema>;

export async function detectErrors(input: DetectErrorsInput): Promise<DetectErrorsOutput> {
  return detectErrorsFlow(input);
}

const detectErrorsPrompt = ai.definePrompt({
  name: 'detectErrorsPrompt',
  input: {schema: DetectErrorsInputSchema},
  output: {schema: DetectErrorsOutputSchema},
  prompt: `You are an AI expert in identifying errors in code. Analyze the following code snippet and identify any errors.

Language: {{{language}}}
Code:
{{{
    code
}}}

Identify the line number, error type, description, and severity level for each error. Return the errors in JSON format.
`,
});

const detectErrorsFlow = ai.defineFlow(
  {
    name: 'detectErrorsFlow',
    inputSchema: DetectErrorsInputSchema,
    outputSchema: DetectErrorsOutputSchema,
  },
  async input => {
    const {output} = await detectErrorsPrompt(input);
    return output!;
  }
);
